package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/tabed23/auth-graphql/graph/model"
	"github.com/tabed23/auth-graphql/service"
	"github.com/tabed23/auth-graphql/utils"
	"gorm.io/gorm"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	usr, err := r.UserGetByEmail(ctx, email)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, err
		}
	}

	if err := utils.ValidatePassword(usr.Password, password); err != nil {
		return nil, err
	}

	token, err := service.GenrarteJwtToken(ctx, usr.ID, usr.Email)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"token": token,
		"user":  usr,
	}, nil
}

// Register is the resolver for the register fi	eld.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	_, err := r.UserGetByEmail(ctx, input.Email)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, err
		}
	}
	createdUser, err := r.UserCreate(ctx, input)
	if err != nil {
		return nil, err
	}

	token, err := service.GenrarteJwtToken(ctx, createdUser.ID, createdUser.Email)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"token": token,
	}, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, email string) (string, error) {
	if err := r.UserDelete(ctx, email); err != nil {
		return fmt.Sprintf("user %v", email), err
	}
	return fmt.Sprintf("user %v is deleted", email), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, email string, input *model.NewUser) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	usr, err := r.UserGetByID(ctx, id)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, err
		}
	}
	return usr, nil
}

// UserEmail is the resolver for the userEmail field.
func (r *queryResolver) UserEmail(ctx context.Context, email string) (*model.User, error) {
	usr, err := r.UserGetByEmail(ctx, email)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, err
		}
	}
	return usr, nil
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "sucessfully login", nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
